CCS PCM C Compiler, Version 5.070, 56587               06-mar.-18 13:46

               Filename:   C:\Users\Nicolas Zamora\Documents\ComunicacionesDigitales\Codificador-8QAM\Codificador8QAM\Control\Codificador8QAM.lst

               ROM used:   195 words (10%)
                           Largest free fragment is 1853
               RAM used:   42 (19%) at main() level
                           45 (20%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   080
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   02F
001E:  MOVF   22,W
001F:  MOVWF  04
0020:  MOVF   23,W
0021:  MOVWF  77
0022:  MOVF   24,W
0023:  MOVWF  78
0024:  MOVF   25,W
0025:  MOVWF  79
0026:  MOVF   26,W
0027:  MOVWF  7A
0028:  MOVF   27,W
0029:  MOVWF  0A
002A:  SWAPF  21,W
002B:  MOVWF  03
002C:  SWAPF  7F,F
002D:  SWAPF  7F,W
002E:  RETFIE
.................... #include <16F628A.h>         // Modify for your chip 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
....................  
....................  
.................... #fuses NOMCLR //Se configura master clear 
.................... #fuses NOWDT  //Se indican los fuses activos/inactivos. Y el indicativo de alta velocidad 
.................... #fuseS HS 
....................  
.................... #use delay(clock=20M) 
....................  
.................... //Se ubican los registros de configuracion de puertos 
....................  
.................... #Byte TRISA = 0x85  
.................... #Byte PORTA = 0x05 
.................... #Byte TRISB = 0x86 
.................... #Byte PORTB = 0x06 
....................  
....................  
.................... //#fuses XT,NOMCLR,NOWDT,PUT,NOLVP... 
....................  
.................... //en XT le dice al pic que lleva un oscilador conectado <4mhz 
.................... //el NOMCLR le dice al pic que deshabilita el pin masterclear, desactiva el reset externo por el pic MCLR 
.................... //el NOWDT le dice al pic que deshabilita el Watchdog timer "perro guardian" 
.................... //el PUT habilita el Power Up Timer, tiempo de espera para estabilizacion de alimentacion 
.................... //el NOLVP deshabilita un pin asignado para la programacion de bajo voltaje... low voltage programing 
....................  
.................... #DEFINE S PIN_A0 
.................... #DEFINE P1 PIN_A1 
.................... #DEFINE P2 PIN_A2 
.................... #DEFINE P3 PIN_A3 
....................  
....................  
.................... int cuenta=0,p=0; 
.................... unsigned int arreglo[24]={0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1}; 
*
0088:  CLRF   2A
0089:  CLRF   2B
008A:  CLRF   2C
008B:  CLRF   2D
008C:  CLRF   2E
008D:  MOVLW  01
008E:  MOVWF  2F
008F:  CLRF   30
0090:  MOVWF  31
0091:  CLRF   32
0092:  CLRF   33
0093:  MOVWF  34
0094:  MOVWF  35
0095:  MOVWF  36
0096:  CLRF   37
0097:  CLRF   38
0098:  MOVWF  39
0099:  CLRF   3A
009A:  MOVWF  3B
009B:  MOVWF  3C
009C:  MOVWF  3D
009D:  CLRF   3E
009E:  MOVWF  3F
009F:  MOVWF  40
00A0:  MOVWF  41
.................... unsigned int aux[3]={0,0,0}; 
00A1:  CLRF   42
00A2:  CLRF   43
00A3:  CLRF   44
....................  
....................  
....................  
.................... #int_EXT 
.................... void control(){ 
....................  
.................... if(cuenta==24){ 
*
002F:  MOVF   28,W
0030:  SUBLW  18
0031:  BTFSC  03.2
....................    cuenta=0; 
0032:  CLRF   28
.................... } 
....................     
.................... if(p==3){ 
0033:  MOVF   29,W
0034:  SUBLW  03
0035:  BTFSS  03.2
0036:  GOTO   059
....................  
....................    if(aux[0]==1){ 
0037:  DECFSZ 42,W
0038:  GOTO   03E
....................       output_high(P1); 
0039:  BSF    03.5
003A:  BCF    05.1
003B:  BCF    03.5
003C:  BSF    05.1
....................    }else{ 
003D:  GOTO   042
....................       output_low(P1); 
003E:  BSF    03.5
003F:  BCF    05.1
0040:  BCF    03.5
0041:  BCF    05.1
....................    } 
....................    if(aux[1]==1){ 
0042:  DECFSZ 43,W
0043:  GOTO   049
....................       output_high(P2); 
0044:  BSF    03.5
0045:  BCF    05.2
0046:  BCF    03.5
0047:  BSF    05.2
....................    }else{ 
0048:  GOTO   04D
....................       output_low(P2); 
0049:  BSF    03.5
004A:  BCF    05.2
004B:  BCF    03.5
004C:  BCF    05.2
....................    } 
....................    if(aux[2]==1){ 
004D:  DECFSZ 44,W
004E:  GOTO   054
....................       output_high(P3); 
004F:  BSF    03.5
0050:  BCF    05.3
0051:  BCF    03.5
0052:  BSF    05.3
....................    }else{ 
0053:  GOTO   058
....................       output_low(P3); 
0054:  BSF    03.5
0055:  BCF    05.3
0056:  BCF    03.5
0057:  BCF    05.3
....................    } 
....................  
....................    p=0; 
0058:  CLRF   29
.................... } 
....................  
.................... if(arreglo[cuenta]==1){ 
0059:  MOVLW  2A
005A:  ADDWF  28,W
005B:  MOVWF  04
005C:  BCF    03.7
005D:  DECFSZ 00,W
005E:  GOTO   064
....................    output_high(S); 
005F:  BSF    03.5
0060:  BCF    05.0
0061:  BCF    03.5
0062:  BSF    05.0
.................... }else{ 
0063:  GOTO   068
....................    output_low(S); 
0064:  BSF    03.5
0065:  BCF    05.0
0066:  BCF    03.5
0067:  BCF    05.0
.................... } 
.................... aux[p]=arreglo[cuenta]; 
0068:  MOVLW  42
0069:  ADDWF  29,W
006A:  MOVWF  78
006B:  CLRF   7A
006C:  BTFSC  03.0
006D:  INCF   7A,F
006E:  MOVLW  2A
006F:  ADDWF  28,W
0070:  MOVWF  04
0071:  BCF    03.7
0072:  MOVF   00,W
0073:  MOVWF  47
0074:  MOVF   78,W
0075:  MOVWF  04
0076:  BCF    03.7
0077:  BTFSC  7A.0
0078:  BSF    03.7
0079:  MOVF   47,W
007A:  MOVWF  00
....................  
.................... p++; 
007B:  INCF   29,F
.................... cuenta++; 
007C:  INCF   28,F
007D:  BCF    0B.1
007E:  BCF    0A.3
007F:  GOTO   01E
.................... } 
....................  
....................  
....................  
.................... void main(void) { 
0080:  MOVF   03,W
0081:  ANDLW  1F
0082:  MOVWF  03
0083:  CLRF   28
0084:  CLRF   29
0085:  MOVLW  07
0086:  MOVWF  1F
0087:  BCF    03.7
....................  
.................... //Entradas y salidas 
.................... TRISA = 0b00000000; //1 = ENTRADA, 0 = SALIDA 
*
00A4:  BSF    03.5
00A5:  CLRF   05
.................... TRISB = 0b00000001; //1 = ENTRADA, 0 = SALIDA 
00A6:  MOVLW  01
00A7:  MOVWF  06
....................  
.................... enable_interrupts(int_ext);      //activar interrupcion externa 
00A8:  BCF    03.5
00A9:  BSF    0B.4
.................... ext_int_edge(H_TO_L);         //configuracion:interrupcion cuando señal esta en flanco de subida 
00AA:  BSF    03.5
00AB:  BCF    01.6
.................... enable_interrupts(GLOBAL);      //todas las interrupciones desactivadas 
00AC:  MOVLW  C0
00AD:  BCF    03.5
00AE:  IORWF  0B,F
.................... p=0; 
00AF:  CLRF   29
.................... cuenta=0; 
00B0:  CLRF   28
.................... output_low(S); 
00B1:  BSF    03.5
00B2:  BCF    05.0
00B3:  BCF    03.5
00B4:  BCF    05.0
.................... output_low(P1); 
00B5:  BSF    03.5
00B6:  BCF    05.1
00B7:  BCF    03.5
00B8:  BCF    05.1
.................... output_low(P2); 
00B9:  BSF    03.5
00BA:  BCF    05.2
00BB:  BCF    03.5
00BC:  BCF    05.2
.................... output_low(P3); 
00BD:  BSF    03.5
00BE:  BCF    05.3
00BF:  BCF    03.5
00C0:  BCF    05.3
....................  
....................  
....................     while(true) {           // Produces a 1khz square wave on pin B0 
00C1:  GOTO   0C1
....................        
....................       } 
.................... } 
00C2:  SLEEP

Configuration Fuses:
   Word  1: 3F42   NOWDT PUT HS NOMCLR BROWNOUT NOLVP NOCPD NOPROTECT
