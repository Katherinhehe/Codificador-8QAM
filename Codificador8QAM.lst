CCS PCM C Compiler, Version 5.070, 56587               10-feb.-18 11:48

               Filename:   C:\Users\Nicolas Zamora\Documents\ComunicacionesDigitales\Codificador-8QAM\Codificador8QAM.lst

               ROM used:   70 words (1%)
                           Largest free fragment is 2048
               RAM used:   34 (9%) at main() level
                           34 (9%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #include <16F887.h>         // Modify for your chip 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
....................  
....................  
.................... #fuses MCLR //Se configura master clear 
.................... #fuses NOWDT  //Se indican los fuses activos/inactivos. Y el indicativo de alta velocidad 
.................... #fuses INTRC_IO 
....................  
.................... #use delay(internal=8000000)//Se configura reloj interno a 8M 
....................  
.................... //Se ubican los registros de configuracion de puertos 
....................  
.................... #Byte TRISA = 0x85  
.................... #Byte PORTA = 0x05 
.................... #Byte TRISB = 0x86 
.................... #Byte PORTB = 0x06 
....................  
....................  
.................... //#fuses XT,NOMCLR,NOWDT,PUT,NOLVP... 
....................  
.................... //en XT le dice al pic que lleva un oscilador conectado <4mhz 
.................... //el NOMCLR le dice al pic que deshabilita el pin masterclear, desactiva el reset externo por el pic MCLR 
.................... //el NOWDT le dice al pic que deshabilita el Watchdog timer "perro guardian" 
.................... //el PUT habilita el Power Up Timer, tiempo de espera para estabilizacion de alimentacion 
.................... //el NOLVP deshabilita un pin asignado para la programacion de bajo voltaje... low voltage programing 
....................  
.................... int cuenta=1,p=1; 
.................... unsigned int arreglo[24]={0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1}; 
*
0021:  BCF    03.6
0022:  CLRF   22
0023:  CLRF   23
0024:  CLRF   24
0025:  CLRF   25
0026:  CLRF   26
0027:  MOVLW  01
0028:  MOVWF  27
0029:  CLRF   28
002A:  MOVWF  29
002B:  CLRF   2A
002C:  CLRF   2B
002D:  MOVWF  2C
002E:  MOVWF  2D
002F:  MOVWF  2E
0030:  CLRF   2F
0031:  CLRF   30
0032:  MOVWF  31
0033:  CLRF   32
0034:  MOVWF  33
0035:  MOVWF  34
0036:  MOVWF  35
0037:  CLRF   36
0038:  MOVWF  37
0039:  MOVWF  38
003A:  MOVWF  39
.................... unsigned int aux[3]={0,0,0}; 
003B:  CLRF   3A
003C:  CLRF   3B
003D:  CLRF   3C
....................  
.................... //!#int_EXT 
.................... //!void control(){ 
.................... //! 
.................... //!if(cuenta==24){ 
.................... //!   cuenta=1; 
.................... //!} 
.................... //!    
.................... //!if(p==3){ 
.................... //! 
.................... //!   if(aux[1]==1){ 
.................... //!      output_high(PIN_A2); 
.................... //!   }else{ 
.................... //!      output_low(PIN_A2); 
.................... //!   } 
.................... //!   if(aux[2]==1){ 
.................... //!      output_high(PIN_A3); 
.................... //!   }else{ 
.................... //!      output_low(PIN_A3); 
.................... //!   } 
.................... //!   if(aux[3]==1){ 
.................... //!      output_high(PIN_A4); 
.................... //!   }else{ 
.................... //!      output_low(PIN_A4); 
.................... //!   } 
.................... //! 
.................... //!   p=1; 
.................... //!} 
.................... //! 
.................... //!if(arreglo[cuenta]==1){ 
.................... //!   output_high(PIN_A1); 
.................... //!}else{ 
.................... //!   output_low(PIN_A1); 
.................... //!} 
.................... //! 
.................... //!aux[p]=arreglo[cuenta]; 
.................... //!p++; 
.................... //!cuenta++; 
.................... //! 
.................... //! 
.................... //!} 
.................... //! 
....................  
....................  
.................... void main(void) { 
*
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  MOVLW  71
0008:  BSF    03.5
0009:  MOVWF  0F
000A:  CLRF   10
000B:  MOVF   0F,W
000C:  MOVLW  01
000D:  BCF    03.5
000E:  MOVWF  20
000F:  MOVLW  01
0010:  MOVWF  21
0011:  BSF    03.5
0012:  BSF    03.6
0013:  MOVF   09,W
0014:  ANDLW  C0
0015:  MOVWF  09
0016:  BCF    03.6
0017:  BCF    1F.4
0018:  BCF    1F.5
0019:  MOVLW  00
001A:  BSF    03.6
001B:  MOVWF  08
001C:  BCF    03.5
001D:  CLRF   07
001E:  CLRF   08
001F:  CLRF   09
0020:  BCF    03.7
.................... //reloj interno 
.................... setup_oscillator(OSC_8MHZ|OSC_INTRC); 
*
003E:  MOVLW  71
003F:  BSF    03.5
0040:  MOVWF  0F
0041:  CLRF   10
0042:  MOVF   0F,W
....................  
....................  
.................... //Entradas y salidas 
.................... TRISA = 0b00000000; //1 = ENTRADA, 0 = SALIDA 
0043:  CLRF   05
.................... //TRISB = 0b00000001; //1 = ENTRADA, 0 = SALIDA 
....................  
.................... //!enable_interrupts(int_ext);      //activar interrupcion externa 
.................... //!ext_int_edge(H_TO_L);         //configuracion:interrupcion cuando señal esta en flanco de subida 
.................... //!enable_interrupts(GLOBAL);      //todas las interrupciones desactivadas 
.................... //!p=0; 
.................... //!cuenta=0; 
....................     while(true) {           // Produces a 1khz square wave on pin B0 
0044:  GOTO   044
....................     } 
.................... } 
0045:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
