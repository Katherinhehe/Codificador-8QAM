CCS PCM C Compiler, Version 5.070, 56587               10-feb.-18 12:56

               Filename:   C:\Users\Nicolas Zamora\Documents\ComunicacionesDigitales\Codificador-8QAM\Codificador8QAM.lst

               ROM used:   200 words (2%)
                           Largest free fragment is 2048
               RAM used:   41 (11%) at main() level
                           44 (12%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   081
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16F887.h>         // Modify for your chip 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
....................  
.................... #list 
....................  
....................  
....................  
.................... #fuses MCLR //Se configura master clear 
.................... #fuses NOWDT  //Se indican los fuses activos/inactivos. Y el indicativo de alta velocidad 
.................... #fuses INTRC_IO 
....................  
.................... #use delay(clock=4M) 
....................  
.................... //Se ubican los registros de configuracion de puertos 
....................  
.................... #Byte TRISA = 0x85  
.................... #Byte PORTA = 0x05 
.................... #Byte TRISB = 0x86 
.................... #Byte PORTB = 0x06 
....................  
....................  
.................... //#fuses XT,NOMCLR,NOWDT,PUT,NOLVP... 
....................  
.................... //en XT le dice al pic que lleva un oscilador conectado <4mhz 
.................... //el NOMCLR le dice al pic que deshabilita el pin masterclear, desactiva el reset externo por el pic MCLR 
.................... //el NOWDT le dice al pic que deshabilita el Watchdog timer "perro guardian" 
.................... //el PUT habilita el Power Up Timer, tiempo de espera para estabilizacion de alimentacion 
.................... //el NOLVP deshabilita un pin asignado para la programacion de bajo voltaje... low voltage programing 
....................  
.................... int cuenta=1,p=1; 
.................... unsigned int arreglo[24]={0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1}; 
*
009E:  BCF    03.6
009F:  CLRF   29
00A0:  CLRF   2A
00A1:  CLRF   2B
00A2:  CLRF   2C
00A3:  CLRF   2D
00A4:  MOVLW  01
00A5:  MOVWF  2E
00A6:  CLRF   2F
00A7:  MOVWF  30
00A8:  CLRF   31
00A9:  CLRF   32
00AA:  MOVWF  33
00AB:  MOVWF  34
00AC:  MOVWF  35
00AD:  CLRF   36
00AE:  CLRF   37
00AF:  MOVWF  38
00B0:  CLRF   39
00B1:  MOVWF  3A
00B2:  MOVWF  3B
00B3:  MOVWF  3C
00B4:  CLRF   3D
00B5:  MOVWF  3E
00B6:  MOVWF  3F
00B7:  MOVWF  40
.................... unsigned int aux[3]={0,0,0}; 
00B8:  CLRF   41
00B9:  CLRF   42
00BA:  CLRF   43
.................... //! 
.................... #int_EXT 
.................... void control(){ 
....................  
.................... if(cuenta==24){ 
*
002F:  MOVF   27,W
0030:  SUBLW  18
0031:  BTFSC  03.2
....................    cuenta=0; 
0032:  CLRF   27
.................... } 
....................     
.................... if(p==3){ 
0033:  MOVF   28,W
0034:  SUBLW  03
0035:  BTFSS  03.2
0036:  GOTO   059
....................  
....................    if(aux[1]==1){ 
0037:  DECFSZ 42,W
0038:  GOTO   03E
....................       output_high(PIN_A2); 
0039:  BSF    03.5
003A:  BCF    05.2
003B:  BCF    03.5
003C:  BSF    05.2
....................    }else{ 
003D:  GOTO   042
....................       output_low(PIN_A2); 
003E:  BSF    03.5
003F:  BCF    05.2
0040:  BCF    03.5
0041:  BCF    05.2
....................    } 
....................    if(aux[2]==1){ 
0042:  DECFSZ 43,W
0043:  GOTO   049
....................       output_high(PIN_A3); 
0044:  BSF    03.5
0045:  BCF    05.3
0046:  BCF    03.5
0047:  BSF    05.3
....................    }else{ 
0048:  GOTO   04D
....................       output_low(PIN_A3); 
0049:  BSF    03.5
004A:  BCF    05.3
004B:  BCF    03.5
004C:  BCF    05.3
....................    } 
....................    if(aux[3]==1){ 
004D:  DECFSZ 44,W
004E:  GOTO   054
....................       output_high(PIN_A4); 
004F:  BSF    03.5
0050:  BCF    05.4
0051:  BCF    03.5
0052:  BSF    05.4
....................    }else{ 
0053:  GOTO   058
....................       output_low(PIN_A4); 
0054:  BSF    03.5
0055:  BCF    05.4
0056:  BCF    03.5
0057:  BCF    05.4
....................    } 
....................  
....................    p=0; 
0058:  CLRF   28
.................... } 
....................  
.................... if(arreglo[cuenta]==1){ 
0059:  MOVLW  29
005A:  ADDWF  27,W
005B:  MOVWF  04
005C:  BCF    03.7
005D:  DECFSZ 00,W
005E:  GOTO   064
....................    output_high(PIN_A1); 
005F:  BSF    03.5
0060:  BCF    05.1
0061:  BCF    03.5
0062:  BSF    05.1
.................... }else{ 
0063:  GOTO   068
....................    output_low(PIN_A1); 
0064:  BSF    03.5
0065:  BCF    05.1
0066:  BCF    03.5
0067:  BCF    05.1
.................... } 
....................  
.................... aux[p]=arreglo[cuenta]; 
0068:  MOVLW  41
0069:  ADDWF  28,W
006A:  MOVWF  78
006B:  CLRF   7A
006C:  BTFSC  03.0
006D:  INCF   7A,F
006E:  MOVLW  29
006F:  ADDWF  27,W
0070:  MOVWF  04
0071:  BCF    03.7
0072:  MOVF   00,W
0073:  MOVWF  46
0074:  MOVF   78,W
0075:  MOVWF  04
0076:  BCF    03.7
0077:  BTFSC  7A.0
0078:  BSF    03.7
0079:  MOVF   46,W
007A:  MOVWF  00
.................... p++; 
007B:  INCF   28,F
.................... cuenta++; 
007C:  INCF   27,F
....................  
....................  
007D:  BCF    0B.1
007E:  BCF    0A.3
007F:  BCF    0A.4
0080:  GOTO   01B
.................... } 
....................  
....................  
....................  
.................... void main(void) { 
0081:  MOVF   03,W
0082:  ANDLW  1F
0083:  MOVWF  03
0084:  MOVLW  61
0085:  BSF    03.5
0086:  MOVWF  0F
0087:  CLRF   10
0088:  MOVF   0F,W
0089:  MOVLW  01
008A:  BCF    03.5
008B:  MOVWF  27
008C:  MOVLW  01
008D:  MOVWF  28
008E:  BSF    03.5
008F:  BSF    03.6
0090:  MOVF   09,W
0091:  ANDLW  C0
0092:  MOVWF  09
0093:  BCF    03.6
0094:  BCF    1F.4
0095:  BCF    1F.5
0096:  MOVLW  00
0097:  BSF    03.6
0098:  MOVWF  08
0099:  BCF    03.5
009A:  CLRF   07
009B:  CLRF   08
009C:  CLRF   09
009D:  BCF    03.7
.................... //reloj interno 
....................  
....................  
.................... //Entradas y salidas 
.................... TRISA = 0b00000000; //1 = ENTRADA, 0 = SALIDA 
*
00BB:  BSF    03.5
00BC:  CLRF   05
.................... //TRISB = 0b00000001; //1 = ENTRADA, 0 = SALIDA 
....................  
.................... enable_interrupts(int_ext);      //activar interrupcion externa 
00BD:  BCF    03.5
00BE:  BSF    0B.4
.................... ext_int_edge(H_TO_L);         //configuracion:interrupcion cuando señal esta en flanco de subida 
00BF:  BSF    03.5
00C0:  BCF    01.6
.................... enable_interrupts(GLOBAL);      //todas las interrupciones desactivadas 
00C1:  MOVLW  C0
00C2:  BCF    03.5
00C3:  IORWF  0B,F
.................... p=0; 
00C4:  CLRF   28
.................... cuenta=0; 
00C5:  CLRF   27
....................     while(true) {           // Produces a 1khz square wave on pin B0 
00C6:  GOTO   0C6
....................     } 
.................... } 
00C7:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
